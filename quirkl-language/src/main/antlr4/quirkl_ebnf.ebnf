Program                     ::=     Statement+

Statement                   ::=     RunCatch
                                    | ErrorStatement
                                    | VariableIncrement semicolon
                                    | VariableDecrement semicolon
                                    | PrintStatement
                                    | IfStatement
                                    | ForLoop
                                    | WhileLoop
                                    | DoWhileLoop
                                    | Switch
                                    | Declaration semicolon
                                    | Assignment semicolon
                                    | FunctionCall semicolon
                                    | FunctionWithBody
                                    | FunctionWithLambda semicolon

RunCatch                    ::=     run lbrace Statement* rbrace CatchBody

CatchBody                   ::=     catch lparen Id rparen lbrace Statement* rbrace

ErrorStatement              ::=     error_type colon Expression semicolon

VariableIncrement           ::=     increment Id

VariableDecrement           ::=     decrement Id

LateVariableIncrement       ::=     Id increment

LateVariableDecrement       ::=     Id decrement

PrintStatement              ::=     print lparen Expression { comma Expression } rparen semicolon

IfStatement                 ::=     IfCondition { else IfCondition } [ else lbrace Statement* rbrace ]

IfCondition                 ::=     if ToBool lbrace Statement* rbrace

ToBool                      ::=     question_mark lparen Expression rparen

ForLoop                     ::=     run lparen [ Declaration | Expression ] semicolon ToBool semicolon
                                    [ Assignment | Expression ] rparen lbrace Statement* rbrace [ CatchBody ]

WhileLoop                   ::=     run check ToBool lbrace Statement* rbrace [ CatchBody ]

DoWhileLoop                 ::=     run lbrace Statement* rbrace check ToBool [ semicolon | CatchBody ]

Switch                      ::=     match lparen Expression rparen lbrace SwitchCase+ [ DefaultCase ] rbrace

SwitchCase                  ::=     is lparen Expression rparen SwitchCaseBody

SwitchCaseBody              ::=     lbrace Statement* rbrace
                                    | arrow Statement

DefaultCase                 ::=     else SwitchCaseBody

Declaration                 ::=     VariableDefinition [ AssignValue ]

AssignValue                 ::=     assign Expression

VariableDefinition          ::=     Id colon VariableDataType

Assignment                  ::=     Id AssignValue

FunctionCall                ::=     Id lparen [ Arguments ] rparen

Arguments                   ::=     Expression { comma Expression }

FunctionDefinition          ::=     pass lparen [ Parameters ] rparen [ to Id ] colon
                                    AllDataTypes

Parameters                  ::=     VariableDefinition { comma VariableDefinition }

Function                    ::=     FunctionWithBody
                                    | FunctionWithLambda

FunctionWithBody            ::=     FunctionDefinition lbrace Statement* [ BodyReturn semicolon ] rbrace

FunctionWithLambda          ::=     FunctionDefinition arrow Expression

BodyReturn                  ::=     give Expression



Expression                  ::=     InputExpression
                                    | TypeCaseExpression
                                    | BracketExpression
                                    | ExpressionIncrement
                                    | ExpressionDecrement
                                    | Expression exponent Expression
                                    | Expression root Expression
                                    | Expression multiply Expression
                                    | Expression divide Expression
                                    | Expression modulus Expression
                                    | Expression plus Expression
                                    | Expression minus Expression
                                    | SumOperation
                                    | NotBooleanOperation
                                    | Expression ComparisonBooleanOperator Expression
                                    | Expression CompositeBooleanOperator Expression
                                    | ToBool
                                    | TernaryOperation
                                    | Function
                                    | FunctionCall
                                    | VariableExpression
                                    | DataLiteral
                                    | LateVariableIncrement
                                    | LateVariableDecrement

InputExpression             ::=     input lparen [ string ] rparen

TypeCaseExpression          ::=     VariableDataType lparen Expression rparen

BracketExpression           ::=     [ minus ] lparen Expression rparen

ExpressionIncrement         ::=     increment Expression

ExpressionDecrement         ::=     decrement Expression

SumOperation                ::=     SummationOperation
                                    | ProdSummationOperation

SummationOperation          ::=     ( Number | Id ) summ ( Number | Id ) lparen ( Function | Id ) rparen

ProdSummationOperation      ::=     ( Number | Id ) prod_summ ( Number | Id ) lparen ( Function | Id ) rparen

NotBooleanOperation         ::=     not Expression

TernaryOperation            ::=     ToBool arrow Expression colon Expression

VariableExpression          ::=     [ minus ] Id

DataLiteral                 ::=     Number
                                    | Decimal
                                    | boolean
                                    | string

AllDataTypes                ::=     VariableDataType
                                    | void_type

VariableDataType            ::=     bool_type
                                    | number_type
                                    | decimal_type
                                    | string_type
                                    | function_type

ComparisonBooleanOperator  ::=      equal
                                    | not_equal
                                    | greater_than
                                    | less_than
                                    | greater_than_equal
                                    | less_than_equal

CompositeBooleanOperator   ::=      and
                                    | or
                                    | nand
                                    | nor
                                    | xor
                                    | xnor

Id                          ::=     ( letter | ( Keyword ( letter | digit ) )) { letter | digit | Keyword | underscore }

Number                      ::=     [ minus ] digit+
Decimal                     ::=     Number dot digit+

Keyword                     ::=     AllDataTypes
                                    | pass
                                    | give
                                    | to
                                    | run
                                    | check
                                    | match
                                    | is
                                    | if
                                    | else
                                    | print
                                    | catch
                                    | input
                                    | error_type

void_type                   ::=     'void'
bool_type                   ::=     'bool'
number_type                 ::=     'num'
decimal_type                ::=     'dec'
string_type                 ::=     'str'
function_type               ::=     'func'
error_type                  ::=     'err'

pass                        ::=     'pass'
give                        ::=     'give'
to                          ::=     'to'
run                         ::=     'run'
check                       ::=     'check'
match                       ::=     'match'
is                          ::=     'is'
if                          ::=     'if'
else                        ::=     'else'
print                       ::=     'print'
catch                       ::=     'catch'
input                       ::=     'input'

assign                      ::=     '='
lparen                      ::=     '('
rparen                      ::=     ')'
lbrace                      ::=     '{'
rbrace                      ::=     '}'
colon                       ::=     ':'
comma                       ::=     ','
underscore                  ::=     '_'
dot                         ::=     '.'
semicolon                   ::=     ';'
question_mark               ::=     '?'
arrow                       ::=     '->'

increment                   ::=     '++'
decrement                   ::=     '--'
plus                        ::=     '+'
minus                       ::=     '-'
multiply                    ::=     '*'
divide                      ::=     '/'
modulus                     ::=     '%'
exponent                    ::=     '/\'
root                        ::=     '\/'
summ                        ::=     '~'
prod_summ                   ::=     '~*'

equal                       ::=     '=='
not_equal                   ::=     '!='
greater_than                ::=     '>'
less_than                   ::=     '<'
greater_than_equal          ::=     '>='
less_than_equal             ::=     '<='

not                         ::=     '!'
and                         ::=     '&'
or                          ::=     '|'
nand                        ::=     '!&'
nor                         ::=     '!|'
xor                         ::=     '^'
xnor                        ::=     '!^'

string                      ::=     '"' { . } '"' | ''' { . } '''
letter                      ::=     'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'
digit                       ::=     '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
boolean                     ::=     'true' | 'false'